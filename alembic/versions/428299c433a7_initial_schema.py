"""initial_schema

Revision ID: 428299c433a7
Revises: 
Create Date: 2024-11-27 20:25:34.894185

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '428299c433a7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('global_entities',
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning and primary key'),
    sa.Column('entity_id', sa.UUID(), nullable=False, comment='Unique identifier for the entity'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.Column('entity_type', sa.Enum('USER', 'SHOP', 'SHOP_PRODUCT', 'USER_INVOICE', 'USER_PAYMENT', 'SHOP_ORDER', 'SHOP_REVIEW', 'SHOP_PROMOTION', 'USER_PAYMENT_METHOD', name='entitytype', schema='data_playground'), nullable=False, comment='Type of entity being tracked'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the entity was created'),
    sa.Column('deactivated_time', sa.DateTime(timezone=True), nullable=True, comment='When the entity was deactivated (if applicable)'),
    sa.Column('reactivated_time', sa.DateTime(timezone=True), nullable=True, comment='When the entity was reactivated (if applicable)'),
    sa.PrimaryKeyConstraint('event_time', 'entity_id', 'partition_key', name=op.f('pk_global_entities')),
    schema='data_playground',
    comment='Stores entity data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index('idx_global_entity_id_type', 'global_entities', ['entity_id', 'entity_type'], unique=False, schema='data_playground', postgresql_using='btree')
    op.create_index('idx_global_entity_time_id', 'global_entities', ['event_time', 'entity_id'], unique=False, schema='data_playground', postgresql_using='btree')
    op.create_index('idx_global_entity_type_time', 'global_entities', ['entity_type', 'event_time'], unique=False, schema='data_playground', postgresql_using='btree')
    op.create_index(op.f('ix_data_playground_global_entities_created_time'), 'global_entities', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_global_entities_deactivated_time'), 'global_entities', ['deactivated_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_global_entities_entity_type'), 'global_entities', ['entity_type'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_global_entities_reactivated_time'), 'global_entities', ['reactivated_time'], unique=False, schema='data_playground')
    op.create_table('odds_maker',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('max_fake_users_per_day', sa.Integer(), nullable=True),
    sa.Column('max_fake_shops_per_day', sa.Integer(), nullable=True),
    sa.Column('max_user_growth_rate', sa.Float(), nullable=True),
    sa.Column('max_shop_growth_rate', sa.Float(), nullable=True),
    sa.Column('shop_population', sa.Float(), nullable=True),
    sa.Column('shop_creation_chance', sa.Float(), nullable=True),
    sa.Column('user_churn_chance', sa.Float(), nullable=True),
    sa.Column('shop_churn_chance', sa.Float(), nullable=True),
    sa.Column('shops_to_generate', sa.Integer(), nullable=True),
    sa.Column('random_seed', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_odds_maker')),
    schema='data_playground'
    )
    op.create_table('request_response_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('request_body', sa.Text(), nullable=True),
    sa.Column('response_body', sa.Text(), nullable=True),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('partition_key', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_request_response_logs')),
    schema='data_playground',
    postgresql_partition_by='LIST (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_request_response_logs_method'), 'request_response_logs', ['method'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_request_response_logs_url'), 'request_response_logs', ['url'], unique=False, schema='data_playground')
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the user'),
    sa.Column('username', sa.String(length=50), nullable=False, comment="User's unique username for login and display"),
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address for notifications and communication"),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment="User's contact phone number (optional)"),
    sa.Column('status', sa.Boolean(), nullable=False, comment='User account status (true=active, false=inactive)'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the user account was created'),
    sa.Column('deactivated_time', sa.DateTime(timezone=True), nullable=True, comment='When the user account was deactivated (if applicable)'),
    sa.Column('last_login_time', sa.DateTime(timezone=True), nullable=True, comment='Last time the user logged in'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional user data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_users')),
    sa.UniqueConstraint('id', 'partition_key', name='uq_users_id'),
    sa.UniqueConstraint('username', 'partition_key', name='uq_users_username'),
    schema='data_playground',
    comment='Stores  user data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_users_created_time'), 'users', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_users_deactivated_time'), 'users', ['deactivated_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_users_email'), 'users', ['email'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_users_event_time'), 'users', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_users_last_login_time'), 'users', ['last_login_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_users_status'), 'users', ['status'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_users_username'), 'users', ['username'], unique=False, schema='data_playground')
    op.create_index('ix_users_event_time_status', 'users', ['event_time', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_users_status_created_time', 'users', ['status', 'created_time'], unique=False, schema='data_playground')
    op.create_index('ix_users_status_last_login', 'users', ['status', 'last_login_time'], unique=False, schema='data_playground')
    op.create_table('global_events',
    sa.Column('event_id', sa.UUID(), nullable=False, comment='Unique identifier for the event'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp when the event occurred (with timezone)'),
    sa.Column('event_type', sa.Enum('user_account_creation', 'user_delete_account', 'user_deactivate_account', 'user_reactivate_account', 'user_login', 'user_logout', 'user_profile_update', 'user_password_change', 'user_email_change', 'shop_create', 'shop_delete', 'shop_update', 'shop_deactivate', 'shop_reactivate', 'shop_settings_update', 'user_product_create', 'user_product_update', 'user_product_delete', 'user_product_price_change', 'user_product_status_change', 'user_product_category_change', 'user_order_placed', 'user_order_updated', 'user_order_cancelled', 'user_order_processing', 'user_order_shipped', 'user_order_delivered', 'user_order_returned', 'user_order_refunded', 'user_payment_initiated', 'user_payment_processing', 'user_payment_success', 'user_payment_failed', 'user_payment_refunded', 'user_payment_partially_refunded', 'user_payment_disputed', 'user_payment_dispute_resolved', 'user_payment_method_added', 'user_payment_method_updated', 'user_payment_method_removed', 'user_payment_method_expired', 'user_payment_method_default_changed', 'user_review_posted', 'user_review_updated', 'user_review_deleted', 'user_review_reported', 'user_review_status_changed', 'user_review_vote_added', 'user_review_vote_removed', 'user_promotion_created', 'user_promotion_updated', 'user_promotion_activated', 'user_promotion_deactivated', 'user_promotion_used', 'user_promotion_expired', 'user_promotion_limit_reached', 'user_inventory_updated', 'user_inventory_low', 'user_inventory_out', 'user_inventory_restocked', 'user_inventory_adjusted', 'user_inventory_audit', 'user_invoice_created', 'user_invoice_updated', 'user_invoice_paid', 'user_invoice_cancelled', 'user_invoice_overdue', 'user_invoice_reminder_sent', 'user_metrics_updated', 'shop_metrics_updated', 'user_product_metrics_updated', 'user_metrics_rollup_started', 'user_metrics_rollup_completed', 'user_metrics_rollup_failed', 'user_system_startup', 'user_system_shutdown', 'user_system_maintenance_started', 'user_system_maintenance_completed', 'user_system_backup_started', 'user_system_backup_completed', 'user_system_restore_started', 'user_system_restore_completed', 'user_data_validation_started', 'user_data_validation_completed', 'user_data_corruption_detected', 'user_data_repair_started', 'user_data_repair_completed', 'user_api_rate_limit_warning', 'user_api_rate_limit_exceeded', 'user_api_throttling_applied', 'user_api_key_created', 'user_api_key_revoked', 'user_security_suspicious_activity', 'user_security_login_attempt_failed', 'user_security_password_reset', 'user_security_2fa_enabled', 'user_security_2fa_disabled', 'user_error_occurred', 'shop_error_occurred', 'user_payment_error_occurred', 'user_system_error_occurred', name='eventtype'), nullable=False, comment='Type of event that occurred (e.g., user creation, payment, etc.)'),
    sa.Column('event_metadata', sa.JSON(), nullable=True, comment='Additional event-specific data stored as JSON'),
    sa.Column('caller_entity_id', sa.UUID(), nullable=True, comment='ID of the entity that triggered the event'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='ID of the user associated with this event (if applicable)'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional arbitrary data related to the event'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_global_event_user'),
    sa.PrimaryKeyConstraint('event_id', 'partition_key', name=op.f('pk_global_events')),
    schema='data_playground',
    comment='Stores all system events with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_global_events_caller_entity_id'), 'global_events', ['caller_entity_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_global_events_event_time'), 'global_events', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_global_events_event_type'), 'global_events', ['event_type'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_global_events_user_id'), 'global_events', ['user_id'], unique=False, schema='data_playground')
    op.create_index('ix_global_events_entity_time', 'global_events', ['caller_entity_id', 'event_time'], unique=False, schema='data_playground')
    op.create_index('ix_global_events_type_time', 'global_events', ['event_type', 'event_time'], unique=False, schema='data_playground')
    op.create_index('ix_global_events_user_time', 'global_events', ['user_id', 'event_time'], unique=False, schema='data_playground')
    op.create_index('ix_global_events_user_type', 'global_events', ['user_id', 'event_type'], unique=False, schema='data_playground')
    op.create_table('shops',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the shop'),
    sa.Column('owner_id', sa.UUID(), nullable=False, comment='ID of the user who owns this shop'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name of the shop'),
    sa.Column('description', sa.String(length=1000), nullable=True, comment='Detailed description of the shop and its offerings'),
    sa.Column('category', sa.Enum('RETAIL', 'RESTAURANT', 'SERVICES', 'TECHNOLOGY', 'FASHION', 'HEALTH', 'ENTERTAINMENT', 'OTHER', name='shopcategory', schema='data_playground'), nullable=False, comment="Primary category of the shop's business"),
    sa.Column('status', sa.Boolean(), nullable=False, comment='Shop status (true=active, false=inactive)'),
    sa.Column('address_line1', sa.String(length=255), nullable=True, comment='Primary address line'),
    sa.Column('address_line2', sa.String(length=255), nullable=True, comment='Secondary address line (optional)'),
    sa.Column('city', sa.String(length=100), nullable=True, comment='City where the shop is located'),
    sa.Column('state', sa.String(length=100), nullable=True, comment='State/province where the shop is located'),
    sa.Column('postal_code', sa.String(length=20), nullable=True, comment='Postal/ZIP code'),
    sa.Column('country', sa.String(length=100), nullable=True, comment='Country where the shop is located'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the shop was created'),
    sa.Column('deactivated_time', sa.DateTime(timezone=True), nullable=True, comment='When the shop was deactivated (if applicable)'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional shop data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['owner_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_owner'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shops')),
    sa.UniqueConstraint('id', 'partition_key', name='uq_shops_id'),
    schema='data_playground',
    comment='Stores shop data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shops_category'), 'shops', ['category'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_city'), 'shops', ['city'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_country'), 'shops', ['country'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_created_time'), 'shops', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_deactivated_time'), 'shops', ['deactivated_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_event_time'), 'shops', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_name'), 'shops', ['name'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_owner_id'), 'shops', ['owner_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_postal_code'), 'shops', ['postal_code'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_state'), 'shops', ['state'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shops_status'), 'shops', ['status'], unique=False, schema='data_playground')
    op.create_index('ix_shops_location', 'shops', ['country', 'state', 'city'], unique=False, schema='data_playground')
    op.create_index('ix_shops_owner_status', 'shops', ['owner_id', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shops_status_category', 'shops', ['status', 'category'], unique=False, schema='data_playground')
    op.create_index('ix_shops_status_created', 'shops', ['status', 'created_time'], unique=False, schema='data_playground')
    op.create_table('user_metrics_daily',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('orders_placed_count', sa.Integer(), nullable=False),
    sa.Column('orders_cancelled_count', sa.Integer(), nullable=False),
    sa.Column('total_order_amount', sa.Float(), nullable=False),
    sa.Column('avg_order_amount', sa.Float(), nullable=False),
    sa.Column('unique_shops_ordered_from', sa.Integer(), nullable=False),
    sa.Column('total_amount_paid', sa.Float(), nullable=False),
    sa.Column('total_amount_refunded', sa.Float(), nullable=False),
    sa.Column('successful_payments_count', sa.Integer(), nullable=False),
    sa.Column('failed_payments_count', sa.Integer(), nullable=False),
    sa.Column('reviews_written_count', sa.Integer(), nullable=False),
    sa.Column('avg_rating_given', sa.Float(), nullable=True),
    sa.Column('helpful_votes_received', sa.Integer(), nullable=False),
    sa.Column('promotions_used_count', sa.Integer(), nullable=False),
    sa.Column('total_discount_amount', sa.Float(), nullable=False),
    sa.Column('cart_abandonment_count', sa.Integer(), nullable=False),
    sa.Column('total_items_purchased', sa.Integer(), nullable=False),
    sa.Column('extra_metrics', sa.JSON(), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_user_metrics_daily_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_user_metrics_daily')),
    schema='data_playground',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('user_metrics_hourly',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('orders_placed_count', sa.Integer(), nullable=False),
    sa.Column('orders_cancelled_count', sa.Integer(), nullable=False),
    sa.Column('total_order_amount', sa.Float(), nullable=False),
    sa.Column('avg_order_amount', sa.Float(), nullable=False),
    sa.Column('unique_shops_ordered_from', sa.Integer(), nullable=False),
    sa.Column('total_amount_paid', sa.Float(), nullable=False),
    sa.Column('total_amount_refunded', sa.Float(), nullable=False),
    sa.Column('successful_payments_count', sa.Integer(), nullable=False),
    sa.Column('failed_payments_count', sa.Integer(), nullable=False),
    sa.Column('reviews_written_count', sa.Integer(), nullable=False),
    sa.Column('avg_rating_given', sa.Float(), nullable=True),
    sa.Column('helpful_votes_received', sa.Integer(), nullable=False),
    sa.Column('promotions_used_count', sa.Integer(), nullable=False),
    sa.Column('total_discount_amount', sa.Float(), nullable=False),
    sa.Column('cart_abandonment_count', sa.Integer(), nullable=False),
    sa.Column('total_items_purchased', sa.Integer(), nullable=False),
    sa.Column('extra_metrics', sa.JSON(), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_user_metrics_hourly_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_user_metrics_hourly')),
    schema='data_playground',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('user_payment_methods',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the payment method'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user who owns this payment method'),
    sa.Column('method_type', sa.Enum('CREDIT_CARD', 'DEBIT_CARD', 'BANK_ACCOUNT', 'DIGITAL_WALLET', 'CRYPTO_WALLET', name='paymentmethodtype', schema='data_playground'), nullable=False, comment='Type of payment method'),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'SUSPENDED', 'DELETED', name='paymentmethodstatus', schema='data_playground'), nullable=False, comment='Current status of the payment method'),
    sa.Column('token', sa.String(length=255), nullable=False, comment='Tokenized payment method (for security)'),
    sa.Column('last_four', sa.String(length=4), nullable=True, comment='Last 4 digits of card/account'),
    sa.Column('expiry_month', sa.String(length=2), nullable=True, comment='Card expiration month (MM)'),
    sa.Column('expiry_year', sa.String(length=4), nullable=True, comment='Card expiration year (YYYY)'),
    sa.Column('card_brand', sa.String(length=50), nullable=True, comment='Card brand (Visa, Mastercard, etc.)'),
    sa.Column('bank_name', sa.String(length=255), nullable=True, comment='Name of the bank (for bank accounts)'),
    sa.Column('nickname', sa.String(length=100), nullable=True, comment='User-defined name for this payment method'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment="Whether this is the user's default payment method"),
    sa.Column('billing_address_line1', sa.String(length=255), nullable=True, comment='Primary billing address line'),
    sa.Column('billing_address_line2', sa.String(length=255), nullable=True, comment='Secondary billing address line'),
    sa.Column('billing_city', sa.String(length=100), nullable=True, comment='Billing address city'),
    sa.Column('billing_state', sa.String(length=100), nullable=True, comment='Billing address state/province'),
    sa.Column('billing_postal_code', sa.String(length=20), nullable=True, comment='Billing address postal/ZIP code'),
    sa.Column('billing_country', sa.String(length=100), nullable=True, comment='Billing address country'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the payment method was added'),
    sa.Column('updated_time', sa.DateTime(timezone=True), nullable=False, comment='When the payment method was last updated'),
    sa.Column('last_used_time', sa.DateTime(timezone=True), nullable=True, comment='When the payment method was last used'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional payment method data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_user_payment_method_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_user_payment_methods')),
    sa.UniqueConstraint('token', 'partition_key', name='uq_user_payment_methods_token'),
    schema='data_playground',
    comment='Stores user payment method data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('invoices',
    sa.Column('invoice_id', sa.UUID(), nullable=False, comment='Unique identifier for the invoice'),
    sa.Column('invoice_number', sa.String(length=50), nullable=False, comment='Human-readable invoice reference number'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user being invoiced'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop issuing the invoice'),
    sa.Column('invoice_amount', sa.Float(), nullable=False, comment='Base amount before tax and discounts'),
    sa.Column('tax_amount', sa.Float(), nullable=True, comment='Tax amount'),
    sa.Column('discount_amount', sa.Float(), nullable=True, comment='Discount amount'),
    sa.Column('total_amount', sa.Float(), nullable=False, comment='Final amount including tax and discounts'),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'PROCESSING', 'COMPLETED', 'PAID', 'PARTIALLY_PAID', 'FAILED', 'OVERDUE', 'CANCELLED', 'REFUNDED', 'PARTIALLY_REFUNDED', name='paymentstatus', schema='data_playground'), nullable=False, comment='Current status of the invoice'),
    sa.Column('payment_terms', sa.Enum('IMMEDIATE', 'NET_15', 'NET_30', 'NET_45', 'NET_60', 'CUSTOM', name='paymentterms', schema='data_playground'), nullable=False, comment='Payment terms for this invoice'),
    sa.Column('payment_term_days', sa.Integer(), nullable=True, comment='Number of days for custom payment terms'),
    sa.Column('issue_date', sa.DateTime(timezone=True), nullable=False, comment='When the invoice was issued'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=False, comment='When payment is due'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('notes', sa.String(length=1000), nullable=True, comment='Invoice notes'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional invoice data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_invoice_shop'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_user_invoice'),
    sa.PrimaryKeyConstraint('invoice_id', 'partition_key', name=op.f('pk_invoices')),
    sa.UniqueConstraint('invoice_number', 'partition_key', name='uq_invoices_number'),
    schema='data_playground',
    comment='Stores invoice data for users',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_metrics_daily',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shop_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('orders_received_count', sa.Integer(), nullable=False),
    sa.Column('orders_cancelled_count', sa.Integer(), nullable=False),
    sa.Column('total_order_amount', sa.Float(), nullable=False),
    sa.Column('avg_order_amount', sa.Float(), nullable=False),
    sa.Column('unique_customers_count', sa.Integer(), nullable=False),
    sa.Column('total_products_sold', sa.Integer(), nullable=False),
    sa.Column('unique_products_sold', sa.Integer(), nullable=False),
    sa.Column('low_stock_products_count', sa.Integer(), nullable=False),
    sa.Column('out_of_stock_products_count', sa.Integer(), nullable=False),
    sa.Column('gross_revenue', sa.Float(), nullable=False),
    sa.Column('net_revenue', sa.Float(), nullable=False),
    sa.Column('total_discounts_given', sa.Float(), nullable=False),
    sa.Column('total_refunds_amount', sa.Float(), nullable=False),
    sa.Column('reviews_received_count', sa.Integer(), nullable=False),
    sa.Column('avg_rating_received', sa.Float(), nullable=True),
    sa.Column('one_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('five_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('active_promotions_count', sa.Integer(), nullable=False),
    sa.Column('promotions_used_count', sa.Integer(), nullable=False),
    sa.Column('inventory_value', sa.Float(), nullable=False),
    sa.Column('extra_metrics', sa.JSON(), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_metrics_daily_shop'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_metrics_daily')),
    schema='data_playground',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_metrics_hourly',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shop_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('orders_received_count', sa.Integer(), nullable=False),
    sa.Column('orders_cancelled_count', sa.Integer(), nullable=False),
    sa.Column('total_order_amount', sa.Float(), nullable=False),
    sa.Column('avg_order_amount', sa.Float(), nullable=False),
    sa.Column('unique_customers_count', sa.Integer(), nullable=False),
    sa.Column('total_products_sold', sa.Integer(), nullable=False),
    sa.Column('unique_products_sold', sa.Integer(), nullable=False),
    sa.Column('low_stock_products_count', sa.Integer(), nullable=False),
    sa.Column('out_of_stock_products_count', sa.Integer(), nullable=False),
    sa.Column('gross_revenue', sa.Float(), nullable=False),
    sa.Column('net_revenue', sa.Float(), nullable=False),
    sa.Column('total_discounts_given', sa.Float(), nullable=False),
    sa.Column('total_refunds_amount', sa.Float(), nullable=False),
    sa.Column('reviews_received_count', sa.Integer(), nullable=False),
    sa.Column('avg_rating_received', sa.Float(), nullable=True),
    sa.Column('one_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('five_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('active_promotions_count', sa.Integer(), nullable=False),
    sa.Column('promotions_used_count', sa.Integer(), nullable=False),
    sa.Column('inventory_value', sa.Float(), nullable=False),
    sa.Column('extra_metrics', sa.JSON(), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_metrics_hourly_shop'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_metrics_hourly')),
    schema='data_playground',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_orders',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the order'),
    sa.Column('order_number', sa.String(length=50), nullable=False, comment='Human-readable order reference number'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user who placed the order'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop where the order was placed'),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'REFUNDED', 'ON_HOLD', 'RETURNED', name='orderstatus', schema='data_playground'), nullable=False, comment='Current status of the order'),
    sa.Column('subtotal', sa.Float(), nullable=False, comment='Sum of all items before tax and shipping'),
    sa.Column('tax_amount', sa.Float(), nullable=True, comment='Total tax charged'),
    sa.Column('shipping_amount', sa.Float(), nullable=True, comment='Shipping cost'),
    sa.Column('discount_amount', sa.Float(), nullable=True, comment='Total discounts applied'),
    sa.Column('total_amount', sa.Float(), nullable=False, comment='Final order total including all charges and discounts'),
    sa.Column('shipping_method', sa.Enum('STANDARD', 'EXPRESS', 'OVERNIGHT', 'LOCAL_PICKUP', 'INTERNATIONAL', name='shippingmethod', schema='data_playground'), nullable=True, comment='Selected shipping method'),
    sa.Column('shipping_address_line1', sa.String(length=255), nullable=True, comment='Primary shipping address line'),
    sa.Column('shipping_address_line2', sa.String(length=255), nullable=True, comment='Secondary shipping address line'),
    sa.Column('shipping_city', sa.String(length=100), nullable=True, comment='City for shipping'),
    sa.Column('shipping_state', sa.String(length=100), nullable=True, comment='State/province for shipping'),
    sa.Column('shipping_postal_code', sa.String(length=20), nullable=True, comment='Postal/ZIP code for shipping'),
    sa.Column('shipping_country', sa.String(length=100), nullable=True, comment='Country for shipping'),
    sa.Column('tracking_number', sa.String(length=100), nullable=True, comment='Shipping carrier tracking number'),
    sa.Column('tracking_url', sa.String(length=500), nullable=True, comment='URL to track shipment'),
    sa.Column('ordered_time', sa.DateTime(timezone=True), nullable=False, comment='When the order was placed'),
    sa.Column('processed_time', sa.DateTime(timezone=True), nullable=True, comment='When the order started processing'),
    sa.Column('shipped_time', sa.DateTime(timezone=True), nullable=True, comment='When the order was shipped'),
    sa.Column('delivered_time', sa.DateTime(timezone=True), nullable=True, comment='When the order was delivered'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('notes', sa.String(length=1000), nullable=True, comment='Order notes or special instructions'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional order data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_order_shop'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_order_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_orders')),
    sa.UniqueConstraint('order_number', 'partition_key', name='uq_shop_orders_number'),
    schema='data_playground',
    comment='Stores order data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_orders_delivered_time'), 'shop_orders', ['delivered_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_event_time'), 'shop_orders', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_order_number'), 'shop_orders', ['order_number'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_ordered_time'), 'shop_orders', ['ordered_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_processed_time'), 'shop_orders', ['processed_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shipped_time'), 'shop_orders', ['shipped_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shipping_city'), 'shop_orders', ['shipping_city'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shipping_country'), 'shop_orders', ['shipping_country'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shipping_method'), 'shop_orders', ['shipping_method'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shipping_postal_code'), 'shop_orders', ['shipping_postal_code'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shipping_state'), 'shop_orders', ['shipping_state'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_shop_id'), 'shop_orders', ['shop_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_status'), 'shop_orders', ['status'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_subtotal'), 'shop_orders', ['subtotal'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_total_amount'), 'shop_orders', ['total_amount'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_tracking_number'), 'shop_orders', ['tracking_number'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_orders_user_id'), 'shop_orders', ['user_id'], unique=False, schema='data_playground')
    op.create_index('ix_shop_orders_shipping', 'shop_orders', ['shipping_method', 'shipping_country', 'shipping_state'], unique=False, schema='data_playground')
    op.create_index('ix_shop_orders_shop_ordered', 'shop_orders', ['shop_id', 'ordered_time'], unique=False, schema='data_playground')
    op.create_index('ix_shop_orders_shop_status', 'shop_orders', ['shop_id', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_orders_user_ordered', 'shop_orders', ['user_id', 'ordered_time'], unique=False, schema='data_playground')
    op.create_index('ix_shop_orders_user_status', 'shop_orders', ['user_id', 'status'], unique=False, schema='data_playground')
    op.create_table('shop_products',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the product'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop that owns this product'),
    sa.Column('sku', sa.String(length=50), nullable=False, comment='Stock Keeping Unit - unique product identifier within the shop'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name of the product'),
    sa.Column('description', sa.String(length=1000), nullable=True, comment='Detailed description of the product'),
    sa.Column('category', sa.Enum('ELECTRONICS', 'CLOTHING', 'FOOD', 'BOOKS', 'HOME', 'BEAUTY', 'SPORTS', 'TOYS', 'AUTOMOTIVE', 'HEALTH', 'OTHER', name='productcategory', schema='data_playground'), nullable=False, comment='Category the product belongs to'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'OUT_OF_STOCK', 'DISCONTINUED', name='productstatus', schema='data_playground'), nullable=False, comment='Current status of the product'),
    sa.Column('price', sa.Float(), nullable=False, comment='Regular selling price'),
    sa.Column('sale_price', sa.Float(), nullable=True, comment='Discounted price (if on sale)'),
    sa.Column('cost_price', sa.Float(), nullable=True, comment='Cost to acquire or produce the product'),
    sa.Column('stock_quantity', sa.Integer(), nullable=False, comment='Current quantity in stock'),
    sa.Column('low_stock_threshold', sa.Integer(), nullable=True, comment='Quantity at which to trigger low stock alerts'),
    sa.Column('weight', sa.Float(), nullable=True, comment='Weight in grams'),
    sa.Column('dimensions', sa.String(length=50), nullable=True, comment='Dimensions in format LxWxH (cm)'),
    sa.Column('manufacturer', sa.String(length=255), nullable=True, comment='Name of the manufacturer'),
    sa.Column('brand', sa.String(length=255), nullable=True, comment='Brand name of the product'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the product was created'),
    sa.Column('updated_time', sa.DateTime(timezone=True), nullable=False, comment='Last time the product was updated'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='Array of searchable tags'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional product data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_product_shop'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_products')),
    sa.UniqueConstraint('sku', 'partition_key', name='uq_shop_products_sku'),
    schema='data_playground',
    comment='Stores product data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_products_brand'), 'shop_products', ['brand'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_category'), 'shop_products', ['category'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_created_time'), 'shop_products', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_event_time'), 'shop_products', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_manufacturer'), 'shop_products', ['manufacturer'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_name'), 'shop_products', ['name'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_price'), 'shop_products', ['price'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_sale_price'), 'shop_products', ['sale_price'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_shop_id'), 'shop_products', ['shop_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_status'), 'shop_products', ['status'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_stock_quantity'), 'shop_products', ['stock_quantity'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_products_updated_time'), 'shop_products', ['updated_time'], unique=False, schema='data_playground')
    op.create_index('ix_shop_products_shop_category', 'shop_products', ['shop_id', 'category'], unique=False, schema='data_playground')
    op.create_index('ix_shop_products_shop_name', 'shop_products', ['shop_id', 'name'], unique=False, schema='data_playground')
    op.create_index('ix_shop_products_shop_price', 'shop_products', ['shop_id', 'price'], unique=False, schema='data_playground')
    op.create_index('ix_shop_products_shop_status', 'shop_products', ['shop_id', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_products_shop_stock', 'shop_products', ['shop_id', 'stock_quantity'], unique=False, schema='data_playground')
    op.create_table('shop_promotions',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the promotion'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop offering the promotion'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Display name of the promotion'),
    sa.Column('description', sa.String(length=1000), nullable=True, comment='Detailed description of the offer'),
    sa.Column('promotion_type', sa.Enum('PERCENTAGE', 'FIXED_AMOUNT', 'BUY_X_GET_Y', 'BUNDLE', 'FREE_SHIPPING', 'MINIMUM_PURCHASE', name='promotiontype', schema='data_playground'), nullable=False, comment='Type of discount offered'),
    sa.Column('status', sa.Enum('DRAFT', 'SCHEDULED', 'ACTIVE', 'PAUSED', 'ENDED', 'CANCELLED', name='promotionstatus', schema='data_playground'), nullable=False, comment='Current status of the promotion'),
    sa.Column('discount_value', sa.Float(), nullable=False, comment='Amount of discount (percentage or fixed amount)'),
    sa.Column('minimum_purchase_amount', sa.Float(), nullable=True, comment='Minimum order value required'),
    sa.Column('maximum_discount_amount', sa.Float(), nullable=True, comment='Maximum discount allowed'),
    sa.Column('usage_limit_per_user', sa.Integer(), nullable=True, comment='Maximum times a user can use this promotion'),
    sa.Column('usage_limit_total', sa.Integer(), nullable=True, comment='Maximum total uses allowed'),
    sa.Column('current_usage_count', sa.Integer(), nullable=False, comment='Number of times promotion has been used'),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False, comment='When the promotion becomes active'),
    sa.Column('valid_until', sa.DateTime(timezone=True), nullable=False, comment='When the promotion expires'),
    sa.Column('applicability', sa.Enum('ALL_PRODUCTS', 'SPECIFIC_PRODUCTS', 'SPECIFIC_CATEGORIES', 'MINIMUM_ORDER', name='promotionapplicability', schema='data_playground'), nullable=False, comment='What items the promotion applies to'),
    sa.Column('applicable_product_ids', sa.ARRAY(sa.UUID()), nullable=True, comment='List of product IDs eligible for promotion'),
    sa.Column('applicable_categories', sa.ARRAY(sa.String()), nullable=True, comment='List of product categories eligible for promotion'),
    sa.Column('promo_code', sa.String(length=50), nullable=True, comment='Code users enter to apply promotion'),
    sa.Column('requires_code', sa.Boolean(), nullable=False, comment='Whether a code is required to use promotion'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the promotion was created'),
    sa.Column('updated_time', sa.DateTime(timezone=True), nullable=False, comment='When the promotion was last updated'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('terms_conditions', sa.String(length=2000), nullable=True, comment='Terms and conditions for the promotion'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional promotion data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_promotion_shop'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_promotions')),
    sa.UniqueConstraint('promo_code', 'partition_key', name='uq_shop_promotions_code'),
    schema='data_playground',
    comment='Stores promotion data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_promotions_applicability'), 'shop_promotions', ['applicability'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_created_time'), 'shop_promotions', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_current_usage_count'), 'shop_promotions', ['current_usage_count'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_discount_value'), 'shop_promotions', ['discount_value'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_event_time'), 'shop_promotions', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_maximum_discount_amount'), 'shop_promotions', ['maximum_discount_amount'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_minimum_purchase_amount'), 'shop_promotions', ['minimum_purchase_amount'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_name'), 'shop_promotions', ['name'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_promo_code'), 'shop_promotions', ['promo_code'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_promotion_type'), 'shop_promotions', ['promotion_type'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_requires_code'), 'shop_promotions', ['requires_code'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_shop_id'), 'shop_promotions', ['shop_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_status'), 'shop_promotions', ['status'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_updated_time'), 'shop_promotions', ['updated_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_usage_limit_per_user'), 'shop_promotions', ['usage_limit_per_user'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_usage_limit_total'), 'shop_promotions', ['usage_limit_total'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_valid_from'), 'shop_promotions', ['valid_from'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotions_valid_until'), 'shop_promotions', ['valid_until'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotions_applicability', 'shop_promotions', ['applicability', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotions_shop_status', 'shop_promotions', ['shop_id', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotions_type_status', 'shop_promotions', ['promotion_type', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotions_usage', 'shop_promotions', ['current_usage_count', 'usage_limit_total'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotions_validity', 'shop_promotions', ['valid_from', 'valid_until', 'status'], unique=False, schema='data_playground')
    op.create_table('invoice_payments',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the payment'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user making the payment'),
    sa.Column('invoice_id', sa.UUID(), nullable=False, comment='ID of the invoice being paid'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop the invoice is for'),
    sa.Column('payment_method_id', sa.UUID(), nullable=False, comment='ID of the payment method used'),
    sa.Column('amount', sa.Float(), nullable=False, comment='Amount of the payment'),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'PROCESSING', 'COMPLETED', 'PAID', 'PARTIALLY_PAID', 'FAILED', 'OVERDUE', 'CANCELLED', 'REFUNDED', 'PARTIALLY_REFUNDED', name='paymentstatus', schema='data_playground'), nullable=False, comment='Current status of the payment'),
    sa.Column('method', sa.Enum('CREDIT_CARD', 'DEBIT_CARD', 'BANK_ACCOUNT', 'DIGITAL_WALLET', 'CRYPTO_WALLET', name='paymentmethodtype', schema='data_playground'), nullable=False, comment='Method used for payment'),
    sa.Column('is_partial_payment', sa.Boolean(), nullable=False, comment='Whether this is a partial payment'),
    sa.Column('authorization_code', sa.String(length=100), nullable=True, comment='Payment authorization code'),
    sa.Column('transaction_reference', sa.String(length=100), nullable=True, comment='External transaction reference'),
    sa.Column('transaction_fee', sa.Float(), nullable=True, comment='Fee charged for processing payment'),
    sa.Column('initiated_time', sa.DateTime(timezone=True), nullable=False, comment='When the payment was initiated'),
    sa.Column('completed_time', sa.DateTime(timezone=True), nullable=True, comment='When the payment was completed'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('notes', sa.String(length=1000), nullable=True, comment='Notes about the payment'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional payment data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['invoice_id', 'partition_key'], ['data_playground.invoices.invoice_id', 'data_playground.invoices.partition_key'], name='fk_invoice_payment_invoice'),
    sa.ForeignKeyConstraint(['payment_method_id', 'partition_key'], ['data_playground.user_payment_methods.id', 'data_playground.user_payment_methods.partition_key'], name='fk_invoice_payment_method'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_invoice_payment_shop'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_invoice_payment_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_invoice_payments')),
    sa.UniqueConstraint('transaction_reference', 'partition_key', name='uq_invoice_payments_transaction_ref'),
    schema='data_playground',
    comment='Stores invoice payment data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_inventory_logs',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the inventory log entry'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop where the inventory change occurred'),
    sa.Column('product_id', sa.UUID(), nullable=False, comment='ID of the product whose inventory changed'),
    sa.Column('order_id', sa.UUID(), nullable=True, comment='ID of the related order (if applicable)'),
    sa.Column('change_type', sa.Enum('PURCHASE', 'SALE', 'RETURN', 'ADJUSTMENT', 'LOSS', 'RECOUNT', 'TRANSFER_IN', 'TRANSFER_OUT', 'RESERVATION', 'RESERVATION_RELEASE', name='inventorychangetype', schema='data_playground'), nullable=False, comment='Type of inventory change that occurred'),
    sa.Column('quantity_before', sa.Integer(), nullable=False, comment='Stock quantity before the change'),
    sa.Column('quantity_change', sa.Integer(), nullable=False, comment='Amount of change (positive or negative)'),
    sa.Column('quantity_after', sa.Integer(), nullable=False, comment='Stock quantity after the change'),
    sa.Column('unit_cost', sa.Float(), nullable=True, comment='Cost per unit for this change'),
    sa.Column('total_cost', sa.Float(), nullable=True, comment='Total cost for this change'),
    sa.Column('reference_number', sa.String(length=100), nullable=True, comment='External reference (PO number, return number, etc.)'),
    sa.Column('reason', sa.String(length=500), nullable=True, comment='Explanation for the inventory change'),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False, comment='ID of the user who made the change'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the inventory change was recorded'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('notes', sa.String(length=1000), nullable=True, comment='Additional notes about the change'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional inventory data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['created_by_user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_inventory_log_user'),
    sa.ForeignKeyConstraint(['order_id', 'partition_key'], ['data_playground.shop_orders.id', 'data_playground.shop_orders.partition_key'], name='fk_shop_inventory_log_order'),
    sa.ForeignKeyConstraint(['product_id', 'partition_key'], ['data_playground.shop_products.id', 'data_playground.shop_products.partition_key'], name='fk_shop_inventory_log_product'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_inventory_log_shop'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_inventory_logs')),
    schema='data_playground',
    comment='Stores inventory change logs with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_change_type'), 'shop_inventory_logs', ['change_type'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_created_by_user_id'), 'shop_inventory_logs', ['created_by_user_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_created_time'), 'shop_inventory_logs', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_event_time'), 'shop_inventory_logs', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_order_id'), 'shop_inventory_logs', ['order_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_product_id'), 'shop_inventory_logs', ['product_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_quantity_after'), 'shop_inventory_logs', ['quantity_after'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_quantity_before'), 'shop_inventory_logs', ['quantity_before'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_quantity_change'), 'shop_inventory_logs', ['quantity_change'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_reference_number'), 'shop_inventory_logs', ['reference_number'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_shop_id'), 'shop_inventory_logs', ['shop_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_total_cost'), 'shop_inventory_logs', ['total_cost'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_inventory_logs_unit_cost'), 'shop_inventory_logs', ['unit_cost'], unique=False, schema='data_playground')
    op.create_index('ix_shop_inventory_levels', 'shop_inventory_logs', ['product_id', 'quantity_after', 'created_time'], unique=False, schema='data_playground')
    op.create_index('ix_shop_inventory_order', 'shop_inventory_logs', ['order_id', 'change_type'], unique=False, schema='data_playground')
    op.create_index('ix_shop_inventory_product_type', 'shop_inventory_logs', ['product_id', 'change_type'], unique=False, schema='data_playground')
    op.create_index('ix_shop_inventory_shop_type', 'shop_inventory_logs', ['shop_id', 'change_type'], unique=False, schema='data_playground')
    op.create_index('ix_shop_inventory_user_time', 'shop_inventory_logs', ['created_by_user_id', 'created_time'], unique=False, schema='data_playground')
    op.create_table('shop_order_items',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the order item'),
    sa.Column('order_id', sa.UUID(), nullable=False, comment='ID of the parent order'),
    sa.Column('product_id', sa.UUID(), nullable=False, comment='ID of the product ordered'),
    sa.Column('quantity', sa.Float(), nullable=False, comment='Quantity ordered'),
    sa.Column('unit_price', sa.Float(), nullable=False, comment='Price per unit at time of order'),
    sa.Column('subtotal', sa.Float(), nullable=False, comment='Total price before discounts (quantity * unit_price)'),
    sa.Column('discount_amount', sa.Float(), nullable=True, comment='Discount applied to this item'),
    sa.Column('total_amount', sa.Float(), nullable=False, comment='Final price after discounts'),
    sa.Column('is_cancelled', sa.Boolean(), nullable=False, comment='Whether this item was cancelled'),
    sa.Column('is_refunded', sa.Boolean(), nullable=False, comment='Whether this item was refunded'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('notes', sa.String(length=1000), nullable=True, comment='Notes specific to this item'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional item data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['order_id', 'partition_key'], ['data_playground.shop_orders.id', 'data_playground.shop_orders.partition_key'], name='fk_shop_order_item_order'),
    sa.ForeignKeyConstraint(['product_id', 'partition_key'], ['data_playground.shop_products.id', 'data_playground.shop_products.partition_key'], name='fk_shop_order_item_product'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_order_items')),
    schema='data_playground',
    comment='Stores order item data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_order_items_event_time'), 'shop_order_items', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_is_cancelled'), 'shop_order_items', ['is_cancelled'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_is_refunded'), 'shop_order_items', ['is_refunded'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_order_id'), 'shop_order_items', ['order_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_product_id'), 'shop_order_items', ['product_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_quantity'), 'shop_order_items', ['quantity'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_subtotal'), 'shop_order_items', ['subtotal'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_total_amount'), 'shop_order_items', ['total_amount'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_order_items_unit_price'), 'shop_order_items', ['unit_price'], unique=False, schema='data_playground')
    op.create_index('ix_shop_order_items_order_price', 'shop_order_items', ['order_id', 'unit_price'], unique=False, schema='data_playground')
    op.create_index('ix_shop_order_items_order_quantity', 'shop_order_items', ['order_id', 'quantity'], unique=False, schema='data_playground')
    op.create_index('ix_shop_order_items_status', 'shop_order_items', ['is_cancelled', 'is_refunded'], unique=False, schema='data_playground')
    op.create_table('shop_order_payments',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the payment'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user making the payment'),
    sa.Column('order_id', sa.UUID(), nullable=False, comment='ID of the order being paid for'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop the order is from'),
    sa.Column('payment_method_id', sa.UUID(), nullable=False, comment='ID of the payment method used'),
    sa.Column('amount', sa.Float(), nullable=False, comment='Amount of the payment'),
    sa.Column('status', sa.Enum('DRAFT', 'PENDING', 'PROCESSING', 'COMPLETED', 'PAID', 'PARTIALLY_PAID', 'FAILED', 'OVERDUE', 'CANCELLED', 'REFUNDED', 'PARTIALLY_REFUNDED', name='paymentstatus', schema='data_playground'), nullable=False, comment='Current status of the payment'),
    sa.Column('method', sa.Enum('CREDIT_CARD', 'DEBIT_CARD', 'BANK_ACCOUNT', 'DIGITAL_WALLET', 'CRYPTO_WALLET', name='paymentmethodtype', schema='data_playground'), nullable=False, comment='Method used for payment'),
    sa.Column('is_partial_payment', sa.Boolean(), nullable=False, comment='Whether this is a partial payment'),
    sa.Column('authorization_code', sa.String(length=100), nullable=True, comment='Payment authorization code'),
    sa.Column('transaction_reference', sa.String(length=100), nullable=True, comment='External transaction reference'),
    sa.Column('transaction_fee', sa.Float(), nullable=True, comment='Fee charged for processing payment'),
    sa.Column('initiated_time', sa.DateTime(timezone=True), nullable=False, comment='When the payment was initiated'),
    sa.Column('completed_time', sa.DateTime(timezone=True), nullable=True, comment='When the payment was completed'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('notes', sa.String(length=1000), nullable=True, comment='Notes about the payment'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional payment data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['order_id', 'partition_key'], ['data_playground.shop_orders.id', 'data_playground.shop_orders.partition_key'], name='fk_shop_order_payment_order'),
    sa.ForeignKeyConstraint(['payment_method_id', 'partition_key'], ['data_playground.user_payment_methods.id', 'data_playground.user_payment_methods.partition_key'], name='fk_shop_order_payment_method'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_order_payment_shop'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_order_payment_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_order_payments')),
    sa.UniqueConstraint('transaction_reference', 'partition_key', name='uq_shop_order_payments_transaction_ref'),
    schema='data_playground',
    comment='Stores shop order payment data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_product_metrics_daily',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('units_sold', sa.Integer(), nullable=False),
    sa.Column('units_refunded', sa.Integer(), nullable=False),
    sa.Column('gross_sales', sa.Float(), nullable=False),
    sa.Column('net_sales', sa.Float(), nullable=False),
    sa.Column('current_stock_level', sa.Integer(), nullable=False),
    sa.Column('stock_replenishment_count', sa.Integer(), nullable=False),
    sa.Column('time_out_of_stock_minutes', sa.Integer(), nullable=False),
    sa.Column('avg_selling_price', sa.Float(), nullable=False),
    sa.Column('min_selling_price', sa.Float(), nullable=False),
    sa.Column('max_selling_price', sa.Float(), nullable=False),
    sa.Column('reviews_count', sa.Integer(), nullable=False),
    sa.Column('avg_rating', sa.Float(), nullable=True),
    sa.Column('one_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('five_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('times_discounted', sa.Integer(), nullable=False),
    sa.Column('total_discount_amount', sa.Float(), nullable=False),
    sa.Column('cart_additions_count', sa.Integer(), nullable=False),
    sa.Column('cart_removals_count', sa.Integer(), nullable=False),
    sa.Column('page_views', sa.Integer(), nullable=False),
    sa.Column('extra_metrics', sa.JSON(), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['product_id', 'partition_key'], ['data_playground.shop_products.id', 'data_playground.shop_products.partition_key'], name='fk_shop_product_metrics_daily_product'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_product_metrics_daily')),
    schema='data_playground',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_product_metrics_hourly',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('units_sold', sa.Integer(), nullable=False),
    sa.Column('units_refunded', sa.Integer(), nullable=False),
    sa.Column('gross_sales', sa.Float(), nullable=False),
    sa.Column('net_sales', sa.Float(), nullable=False),
    sa.Column('current_stock_level', sa.Integer(), nullable=False),
    sa.Column('stock_replenishment_count', sa.Integer(), nullable=False),
    sa.Column('time_out_of_stock_minutes', sa.Integer(), nullable=False),
    sa.Column('avg_selling_price', sa.Float(), nullable=False),
    sa.Column('min_selling_price', sa.Float(), nullable=False),
    sa.Column('max_selling_price', sa.Float(), nullable=False),
    sa.Column('reviews_count', sa.Integer(), nullable=False),
    sa.Column('avg_rating', sa.Float(), nullable=True),
    sa.Column('one_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('five_star_reviews_count', sa.Integer(), nullable=False),
    sa.Column('times_discounted', sa.Integer(), nullable=False),
    sa.Column('total_discount_amount', sa.Float(), nullable=False),
    sa.Column('cart_additions_count', sa.Integer(), nullable=False),
    sa.Column('cart_removals_count', sa.Integer(), nullable=False),
    sa.Column('page_views', sa.Integer(), nullable=False),
    sa.Column('extra_metrics', sa.JSON(), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['product_id', 'partition_key'], ['data_playground.shop_products.id', 'data_playground.shop_products.partition_key'], name='fk_shop_product_metrics_hourly_product'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_product_metrics_hourly')),
    schema='data_playground',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shop_promotion_usages',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the usage record'),
    sa.Column('promotion_id', sa.UUID(), nullable=False, comment='ID of the promotion used'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user who used the promotion'),
    sa.Column('order_id', sa.UUID(), nullable=False, comment='ID of the order where promotion was applied'),
    sa.Column('discount_amount', sa.Float(), nullable=False, comment='Amount of discount applied'),
    sa.Column('promo_code_used', sa.String(length=50), nullable=True, comment='Promotion code entered (if applicable)'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the promotion was used'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional usage data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['order_id', 'partition_key'], ['data_playground.shop_orders.id', 'data_playground.shop_orders.partition_key'], name='fk_shop_promotion_usage_order'),
    sa.ForeignKeyConstraint(['promotion_id', 'partition_key'], ['data_playground.shop_promotions.id', 'data_playground.shop_promotions.partition_key'], name='fk_shop_promotion_usage_promotion'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_promotion_usage_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_promotion_usages')),
    schema='data_playground',
    comment='Stores promotion usage data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_created_time'), 'shop_promotion_usages', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_discount_amount'), 'shop_promotion_usages', ['discount_amount'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_event_time'), 'shop_promotion_usages', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_order_id'), 'shop_promotion_usages', ['order_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_promo_code_used'), 'shop_promotion_usages', ['promo_code_used'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_promotion_id'), 'shop_promotion_usages', ['promotion_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_promotion_usages_user_id'), 'shop_promotion_usages', ['user_id'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotion_usages_order', 'shop_promotion_usages', ['promotion_id', 'order_id'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotion_usages_time', 'shop_promotion_usages', ['promotion_id', 'created_time'], unique=False, schema='data_playground')
    op.create_index('ix_shop_promotion_usages_user', 'shop_promotion_usages', ['promotion_id', 'user_id'], unique=False, schema='data_playground')
    op.create_table('shop_reviews',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the review'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user who wrote the review'),
    sa.Column('shop_id', sa.UUID(), nullable=False, comment='ID of the shop being reviewed'),
    sa.Column('product_id', sa.UUID(), nullable=True, comment='ID of the product being reviewed (if applicable)'),
    sa.Column('order_id', sa.UUID(), nullable=True, comment='ID of the order associated with this review (if applicable)'),
    sa.Column('review_type', sa.Enum('SHOP', 'PRODUCT', name='reviewtype', schema='data_playground'), nullable=False, comment='Whether this is a shop or product review'),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'REPORTED', 'REMOVED', name='reviewstatus', schema='data_playground'), nullable=False, comment='Current moderation status of the review'),
    sa.Column('rating', sa.Integer(), nullable=False, comment='Rating score (typically 1-5)'),
    sa.Column('title', sa.String(length=255), nullable=True, comment='Review title or summary'),
    sa.Column('content', sa.String(length=2000), nullable=False, comment='Main review text'),
    sa.Column('helpful_votes', sa.Integer(), nullable=False, comment='Number of users who found this review helpful'),
    sa.Column('not_helpful_votes', sa.Integer(), nullable=False, comment='Number of users who found this review not helpful'),
    sa.Column('is_verified_purchase', sa.Boolean(), nullable=False, comment='Whether the reviewer purchased the item/used the shop'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the review was written'),
    sa.Column('updated_time', sa.DateTime(timezone=True), nullable=True, comment='When the review was last edited'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional review data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['order_id', 'partition_key'], ['data_playground.shop_orders.id', 'data_playground.shop_orders.partition_key'], name='fk_shop_review_order'),
    sa.ForeignKeyConstraint(['product_id', 'partition_key'], ['data_playground.shop_products.id', 'data_playground.shop_products.partition_key'], name='fk_shop_review_product'),
    sa.ForeignKeyConstraint(['shop_id', 'partition_key'], ['data_playground.shops.id', 'data_playground.shops.partition_key'], name='fk_shop_review_shop'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_review_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_reviews')),
    schema='data_playground',
    comment='Stores review data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_reviews_created_time'), 'shop_reviews', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_event_time'), 'shop_reviews', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_helpful_votes'), 'shop_reviews', ['helpful_votes'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_is_verified_purchase'), 'shop_reviews', ['is_verified_purchase'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_not_helpful_votes'), 'shop_reviews', ['not_helpful_votes'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_order_id'), 'shop_reviews', ['order_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_product_id'), 'shop_reviews', ['product_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_rating'), 'shop_reviews', ['rating'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_review_type'), 'shop_reviews', ['review_type'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_shop_id'), 'shop_reviews', ['shop_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_status'), 'shop_reviews', ['status'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_updated_time'), 'shop_reviews', ['updated_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_reviews_user_id'), 'shop_reviews', ['user_id'], unique=False, schema='data_playground')
    op.create_index('ix_shop_reviews_helpful', 'shop_reviews', ['helpful_votes', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_reviews_product_rating', 'shop_reviews', ['product_id', 'rating', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_reviews_shop_rating', 'shop_reviews', ['shop_id', 'rating', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_reviews_user_type', 'shop_reviews', ['user_id', 'review_type', 'status'], unique=False, schema='data_playground')
    op.create_index('ix_shop_reviews_verified', 'shop_reviews', ['is_verified_purchase', 'rating', 'status'], unique=False, schema='data_playground')
    op.create_table('shop_review_votes',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the vote'),
    sa.Column('review_id', sa.UUID(), nullable=False, comment='ID of the review being voted on'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID of the user casting the vote'),
    sa.Column('is_helpful', sa.Boolean(), nullable=False, comment='Whether the user found the review helpful'),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False, comment='When the vote was cast'),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False, comment='Timestamp used for partitioning'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Additional vote data stored as JSON'),
    sa.Column('partition_key', sa.String(), nullable=False, comment='Key used for time-based table partitioning'),
    sa.ForeignKeyConstraint(['review_id', 'partition_key'], ['data_playground.shop_reviews.id', 'data_playground.shop_reviews.partition_key'], name='fk_shop_review_vote_review'),
    sa.ForeignKeyConstraint(['user_id', 'partition_key'], ['data_playground.users.id', 'data_playground.users.partition_key'], name='fk_shop_review_vote_user'),
    sa.PrimaryKeyConstraint('id', 'partition_key', name=op.f('pk_shop_review_votes')),
    schema='data_playground',
    comment='Stores review vote data with hourly partitioning for efficient querying',
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_index(op.f('ix_data_playground_shop_review_votes_created_time'), 'shop_review_votes', ['created_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_review_votes_event_time'), 'shop_review_votes', ['event_time'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_review_votes_is_helpful'), 'shop_review_votes', ['is_helpful'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_review_votes_review_id'), 'shop_review_votes', ['review_id'], unique=False, schema='data_playground')
    op.create_index(op.f('ix_data_playground_shop_review_votes_user_id'), 'shop_review_votes', ['user_id'], unique=False, schema='data_playground')
    op.create_index('ix_shop_review_votes_helpful', 'shop_review_votes', ['review_id', 'is_helpful'], unique=False, schema='data_playground')
    op.create_index('ix_shop_review_votes_user', 'shop_review_votes', ['user_id', 'review_id'], unique=False, schema='data_playground')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_shop_review_votes_user', table_name='shop_review_votes', schema='data_playground')
    op.drop_index('ix_shop_review_votes_helpful', table_name='shop_review_votes', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_review_votes_user_id'), table_name='shop_review_votes', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_review_votes_review_id'), table_name='shop_review_votes', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_review_votes_is_helpful'), table_name='shop_review_votes', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_review_votes_event_time'), table_name='shop_review_votes', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_review_votes_created_time'), table_name='shop_review_votes', schema='data_playground')
    op.drop_table('shop_review_votes', schema='data_playground')
    op.drop_index('ix_shop_reviews_verified', table_name='shop_reviews', schema='data_playground')
    op.drop_index('ix_shop_reviews_user_type', table_name='shop_reviews', schema='data_playground')
    op.drop_index('ix_shop_reviews_shop_rating', table_name='shop_reviews', schema='data_playground')
    op.drop_index('ix_shop_reviews_product_rating', table_name='shop_reviews', schema='data_playground')
    op.drop_index('ix_shop_reviews_helpful', table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_user_id'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_updated_time'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_status'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_shop_id'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_review_type'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_rating'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_product_id'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_order_id'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_not_helpful_votes'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_is_verified_purchase'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_helpful_votes'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_event_time'), table_name='shop_reviews', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_reviews_created_time'), table_name='shop_reviews', schema='data_playground')
    op.drop_table('shop_reviews', schema='data_playground')
    op.drop_index('ix_shop_promotion_usages_user', table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index('ix_shop_promotion_usages_time', table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index('ix_shop_promotion_usages_order', table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_user_id'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_promotion_id'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_promo_code_used'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_order_id'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_event_time'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_discount_amount'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotion_usages_created_time'), table_name='shop_promotion_usages', schema='data_playground')
    op.drop_table('shop_promotion_usages', schema='data_playground')
    op.drop_table('shop_product_metrics_hourly', schema='data_playground')
    op.drop_table('shop_product_metrics_daily', schema='data_playground')
    op.drop_table('shop_order_payments', schema='data_playground')
    op.drop_index('ix_shop_order_items_status', table_name='shop_order_items', schema='data_playground')
    op.drop_index('ix_shop_order_items_order_quantity', table_name='shop_order_items', schema='data_playground')
    op.drop_index('ix_shop_order_items_order_price', table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_unit_price'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_total_amount'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_subtotal'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_quantity'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_product_id'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_order_id'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_is_refunded'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_is_cancelled'), table_name='shop_order_items', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_order_items_event_time'), table_name='shop_order_items', schema='data_playground')
    op.drop_table('shop_order_items', schema='data_playground')
    op.drop_index('ix_shop_inventory_user_time', table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index('ix_shop_inventory_shop_type', table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index('ix_shop_inventory_product_type', table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index('ix_shop_inventory_order', table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index('ix_shop_inventory_levels', table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_unit_cost'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_total_cost'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_shop_id'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_reference_number'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_quantity_change'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_quantity_before'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_quantity_after'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_product_id'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_order_id'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_event_time'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_created_time'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_created_by_user_id'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_inventory_logs_change_type'), table_name='shop_inventory_logs', schema='data_playground')
    op.drop_table('shop_inventory_logs', schema='data_playground')
    op.drop_table('invoice_payments', schema='data_playground')
    op.drop_index('ix_shop_promotions_validity', table_name='shop_promotions', schema='data_playground')
    op.drop_index('ix_shop_promotions_usage', table_name='shop_promotions', schema='data_playground')
    op.drop_index('ix_shop_promotions_type_status', table_name='shop_promotions', schema='data_playground')
    op.drop_index('ix_shop_promotions_shop_status', table_name='shop_promotions', schema='data_playground')
    op.drop_index('ix_shop_promotions_applicability', table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_valid_until'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_valid_from'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_usage_limit_total'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_usage_limit_per_user'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_updated_time'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_status'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_shop_id'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_requires_code'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_promotion_type'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_promo_code'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_name'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_minimum_purchase_amount'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_maximum_discount_amount'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_event_time'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_discount_value'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_current_usage_count'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_created_time'), table_name='shop_promotions', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_promotions_applicability'), table_name='shop_promotions', schema='data_playground')
    op.drop_table('shop_promotions', schema='data_playground')
    op.drop_index('ix_shop_products_shop_stock', table_name='shop_products', schema='data_playground')
    op.drop_index('ix_shop_products_shop_status', table_name='shop_products', schema='data_playground')
    op.drop_index('ix_shop_products_shop_price', table_name='shop_products', schema='data_playground')
    op.drop_index('ix_shop_products_shop_name', table_name='shop_products', schema='data_playground')
    op.drop_index('ix_shop_products_shop_category', table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_updated_time'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_stock_quantity'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_status'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_shop_id'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_sale_price'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_price'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_name'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_manufacturer'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_event_time'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_created_time'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_category'), table_name='shop_products', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_products_brand'), table_name='shop_products', schema='data_playground')
    op.drop_table('shop_products', schema='data_playground')
    op.drop_index('ix_shop_orders_user_status', table_name='shop_orders', schema='data_playground')
    op.drop_index('ix_shop_orders_user_ordered', table_name='shop_orders', schema='data_playground')
    op.drop_index('ix_shop_orders_shop_status', table_name='shop_orders', schema='data_playground')
    op.drop_index('ix_shop_orders_shop_ordered', table_name='shop_orders', schema='data_playground')
    op.drop_index('ix_shop_orders_shipping', table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_user_id'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_tracking_number'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_total_amount'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_subtotal'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_status'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shop_id'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shipping_state'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shipping_postal_code'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shipping_method'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shipping_country'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shipping_city'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_shipped_time'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_processed_time'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_ordered_time'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_order_number'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_event_time'), table_name='shop_orders', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shop_orders_delivered_time'), table_name='shop_orders', schema='data_playground')
    op.drop_table('shop_orders', schema='data_playground')
    op.drop_table('shop_metrics_hourly', schema='data_playground')
    op.drop_table('shop_metrics_daily', schema='data_playground')
    op.drop_table('invoices', schema='data_playground')
    op.drop_table('user_payment_methods', schema='data_playground')
    op.drop_table('user_metrics_hourly', schema='data_playground')
    op.drop_table('user_metrics_daily', schema='data_playground')
    op.drop_index('ix_shops_status_created', table_name='shops', schema='data_playground')
    op.drop_index('ix_shops_status_category', table_name='shops', schema='data_playground')
    op.drop_index('ix_shops_owner_status', table_name='shops', schema='data_playground')
    op.drop_index('ix_shops_location', table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_status'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_state'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_postal_code'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_owner_id'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_name'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_event_time'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_deactivated_time'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_created_time'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_country'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_city'), table_name='shops', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_shops_category'), table_name='shops', schema='data_playground')
    op.drop_table('shops', schema='data_playground')
    op.drop_index('ix_global_events_user_type', table_name='global_events', schema='data_playground')
    op.drop_index('ix_global_events_user_time', table_name='global_events', schema='data_playground')
    op.drop_index('ix_global_events_type_time', table_name='global_events', schema='data_playground')
    op.drop_index('ix_global_events_entity_time', table_name='global_events', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_events_user_id'), table_name='global_events', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_events_event_type'), table_name='global_events', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_events_event_time'), table_name='global_events', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_events_caller_entity_id'), table_name='global_events', schema='data_playground')
    op.drop_table('global_events', schema='data_playground')
    op.drop_index('ix_users_status_last_login', table_name='users', schema='data_playground')
    op.drop_index('ix_users_status_created_time', table_name='users', schema='data_playground')
    op.drop_index('ix_users_event_time_status', table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_username'), table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_status'), table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_last_login_time'), table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_event_time'), table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_email'), table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_deactivated_time'), table_name='users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_users_created_time'), table_name='users', schema='data_playground')
    op.drop_table('users', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_request_response_logs_url'), table_name='request_response_logs', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_request_response_logs_method'), table_name='request_response_logs', schema='data_playground')
    op.drop_table('request_response_logs', schema='data_playground')
    op.drop_table('odds_maker', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_entities_reactivated_time'), table_name='global_entities', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_entities_entity_type'), table_name='global_entities', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_entities_deactivated_time'), table_name='global_entities', schema='data_playground')
    op.drop_index(op.f('ix_data_playground_global_entities_created_time'), table_name='global_entities', schema='data_playground')
    op.drop_index('idx_global_entity_type_time', table_name='global_entities', schema='data_playground', postgresql_using='btree')
    op.drop_index('idx_global_entity_time_id', table_name='global_entities', schema='data_playground', postgresql_using='btree')
    op.drop_index('idx_global_entity_id_type', table_name='global_entities', schema='data_playground', postgresql_using='btree')
    op.drop_table('global_entities', schema='data_playground')
    # ### end Alembic commands ###
