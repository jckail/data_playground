"""Initial migration

Revision ID: 94567e87d528
Revises: 
Create Date: 2024-08-16 04:26:42.764529

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '94567e87d528'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('global_events',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('event_type', sa.Enum('user_account_creation', 'user_delete_account', 'user_shop_create', 'user_shop_delete', 'user_deactivate_account', name='eventtype'), nullable=False),
    sa.Column('event_metadata', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('partition_key', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('event_id', 'partition_key'),
    postgresql_partition_by='LIST (partition_key)'
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deactivated_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('partition_key', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'partition_key'),
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('shops',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shop_owner_id', sa.UUID(), nullable=False),
    sa.Column('shop_name', sa.String(length=255), nullable=False),
    sa.Column('created_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('deactivated_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('partition_key', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'partition_key'),
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('user_invoices',
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('shop_id', sa.UUID(), nullable=False),
    sa.Column('invoice_amount', sa.Float(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('partition_key', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('invoice_id', 'partition_key'),
    postgresql_partition_by='RANGE (partition_key)'
    )
    op.create_table('payments',
    sa.Column('payment_id', sa.UUID(), nullable=False),
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('payment_amount', sa.Float(), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('partition_key', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('payment_id', 'partition_key'),
    postgresql_partition_by='RANGE (partition_key)'
    )
    
    # Add foreign key constraints after table creation
    op.execute('ALTER TABLE shops ADD CONSTRAINT fk_shop_owner FOREIGN KEY (shop_owner_id, partition_key) REFERENCES users (id, partition_key)')
    op.execute('ALTER TABLE user_invoices ADD CONSTRAINT fk_user_invoice_user FOREIGN KEY (user_id, partition_key) REFERENCES users (id, partition_key)')
    op.execute('ALTER TABLE user_invoices ADD CONSTRAINT fk_user_invoice_shop FOREIGN KEY (shop_id, partition_key) REFERENCES shops (id, partition_key)')
    op.execute('ALTER TABLE payments ADD CONSTRAINT fk_payment_invoice FOREIGN KEY (invoice_id, partition_key) REFERENCES user_invoices (invoice_id, partition_key)')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payments')
    op.drop_table('user_invoices')
    op.drop_table('shops')
    op.drop_table('users')
    op.drop_table('global_events')
    # ### end Alembic commands ###