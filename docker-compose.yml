version: "3.8"
services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@db/dbname
      - PYTHONPATH=/code
      - POOL_SIZE=250
      - MAX_OVERFLOW=50
      - POOL_TIMEOUT=30
      - POOL_RECYCLE=1800
    volumes:
      - ./app:/code/app
      - ./alembic:/code/alembic
      - ./alembic.ini:/code/alembic.ini
      

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/code
    volumes:
      - ./streamlit_app:/code/streamlit_app

  db:
    image: postgres:15
    command: -c 'max_connections=500' -c 'max_locks_per_transaction=250'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dbname
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dbname"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 6g   # Set memory limit to 4GB
        reservations:
          memory: 4g   # Reserve 2GB of memory

  pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      - DATABASES=dbname=host=db user=user password=password
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
    ports:
      - "6432:6432"  # PgBouncer listens on port 6432

  prometheus:
    image: prom/prometheus:v2.30.3
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    restart: always

  # grafana:
  #   image: grafana/grafana:8.2.2
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources  # <-- Verify this line
  #     - ./grafana/dashboards:/var/lib/grafana/dashboards
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin_password
  #     - GF_LOG_LEVEL=debug
  #   depends_on:
  #     - prometheus
  #   restart: always

  disk_monitor:
    build:
      context: .
      dockerfile: Dockerfile.disk_monitor
    volumes:
      - /:/hostfs:ro
    privileged: true

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: